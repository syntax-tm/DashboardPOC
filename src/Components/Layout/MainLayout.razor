@using DashboardPOC.Interfaces
@inherits LayoutComponentBase
@inject IThemeService ThemeService

<MudThemingProvider IsDarkMode="@ThemeService.IsDarkMode" Theme="@ThemeService.Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">ABC Pharmacy Dashboard</MudText>
        <MudSpacer />
        <MudSwitch Color="Color.Primary" LabelPosition="LabelPosition.Start" T="bool" ThumbIcon="@_themeIcon" ValueChanged="@(e => OnIsDarkModeChanged(e))" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private string _themeIcon;

    protected override Task OnInitializedAsync()
    {
        RefreshIcon();
        
        ThemeService.OnIsDarkModeChange += ThemeServiceOnOnIsDarkModeChanged;

        return base.OnInitializedAsync();
    }

    private void ThemeServiceOnOnIsDarkModeChanged()
    {
        RefreshIcon();
    }

    private void OnIsDarkModeChanged(bool value)
    {
        ThemeService.IsDarkMode = value;
    }

    private void RefreshIcon()
    {
        _themeIcon = ThemeService.IsDarkMode
            ? Icons.Material.Filled.DarkMode
            : Icons.Material.Filled.LightMode;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}